<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ef.golf.mapper.BackMapper" >
  <resultMap id="BaseResultMap" type="com.ef.golf.pojo.Back" >
    <id column="back_id" property="backId" jdbcType="INTEGER" />
    <result column="account_id_from" property="accountIdFrom" jdbcType="INTEGER" />
    <result column="account_id_to" property="accountIdTo" jdbcType="INTEGER" />
    <result column="money" property="money" jdbcType="DOUBLE" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
    <result column="apply_id" property="applyId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    back_id, account_id_from, account_id_to, money, create_time, modify_time, apply_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ef_back
    where back_id = #{backId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ef_back
    where back_id = #{backId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ef.golf.pojo.Back" >
    insert into ef_back (back_id, account_id_from, account_id_to, 
      money, create_time, modify_time, 
      apply_id)
    values (#{backId,jdbcType=INTEGER}, #{accountIdFrom,jdbcType=INTEGER}, #{accountIdTo,jdbcType=INTEGER}, 
      #{money,jdbcType=DOUBLE}, #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP}, 
      #{applyId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ef.golf.pojo.Back" >
    insert into ef_back
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="backId != null" >
        back_id,
      </if>
      <if test="accountIdFrom != null" >
        account_id_from,
      </if>
      <if test="accountIdTo != null" >
        account_id_to,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="applyId != null" >
        apply_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="backId != null" >
        #{backId,jdbcType=INTEGER},
      </if>
      <if test="accountIdFrom != null" >
        #{accountIdFrom,jdbcType=INTEGER},
      </if>
      <if test="accountIdTo != null" >
        #{accountIdTo,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        #{money,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="applyId != null" >
        #{applyId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ef.golf.pojo.Back" >
    update ef_back
    <set >
      <if test="accountIdFrom != null" >
        account_id_from = #{accountIdFrom,jdbcType=INTEGER},
      </if>
      <if test="accountIdTo != null" >
        account_id_to = #{accountIdTo,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="applyId != null" >
        apply_id = #{applyId,jdbcType=INTEGER},
      </if>
    </set>
    where back_id = #{backId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ef.golf.pojo.Back" >
    update ef_back
    set account_id_from = #{accountIdFrom,jdbcType=INTEGER},
      account_id_to = #{accountIdTo,jdbcType=INTEGER},
      money = #{money,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      apply_id = #{applyId,jdbcType=INTEGER}
    where back_id = #{backId,jdbcType=INTEGER}
  </update>
</mapper>